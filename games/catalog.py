"""Registry of available and planned games for the platform."""

from __future__ import annotations

from dataclasses import dataclass
from typing import Iterable, List, Sequence

from django.urls import reverse

from .services.book_journey import BookJourneyMap
from .services.forgotten_books import ForgottenBooksGame
from .services.read_before_buy import ReadBeforeBuyGame


@dataclass(frozen=True)
class GameCard:
    """Data required to render the game card on the listing page."""

    slug: str
    title: str
    description: str
    url_name: str
    icon: str = "üéÆ"
    is_available: bool = True
    badge: str | None = None
    badge_variant: str = "primary"
    highlights: Sequence[str] = ()

    def resolve_url(self) -> str:
        return reverse(self.url_name)


def get_game_cards() -> List[GameCard]:
    """Return card descriptors for all available and planned games."""

    read_before_buy = ReadBeforeBuyGame.get_game()
    forgotten_books = ForgottenBooksGame.get_game()
    available: List[GameCard] = [
        GameCard(
            slug=ReadBeforeBuyGame.SLUG,
            title=read_before_buy.title,
            description=read_before_buy.description,
            url_name="games:read_before_buy",
            icon="üìö",
            highlights=(
                "–ë–∞–ª–ª—ã –∑–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                "–ë–æ–Ω—É—Å—ã –∑–∞ –±–æ–ª—å—à–∏–µ –∫–Ω–∏–≥–∏",
                "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫",
            ),
        ),
        GameCard(
            slug=ForgottenBooksGame.SLUG,
            title=forgotten_books.title,
            description=forgotten_books.description,
            url_name="games:forgotten_books",
            icon="üï∞Ô∏è",
            highlights=(
                "12 –∫–Ω–∏–≥ –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                "–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü",
                "–û—Ç–∑—ã–≤ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞",
            ),
        ),
        GameCard(
            slug="book-journey-map",
            title=BookJourneyMap.TITLE,
            description=BookJourneyMap.SUBTITLE,
            url_name="games:book_journey_map",
            icon="üó∫Ô∏è",
            highlights=(
                f"{BookJourneyMap.get_stage_count()} —ç—Ç–∞–ø–æ–≤",
                "–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è",
                "–¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
            ),
        ),
    ]

    planned: Iterable[GameCard] = (
        GameCard(
            slug="reading-streaks",
            title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–µ—Ä–∏–∏ —á—Ç–µ–Ω–∏—è",
            description="–û—Ç–º–µ—á–∞–π—Ç–µ —á—Ç–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.",
            url_name="games:read_before_buy",
            icon="üî•",
            is_available=False,
            badge="–°–∫–æ—Ä–æ",
            badge_variant="warning",
        ),
        GameCard(
            slug="club-quests",
            title="–ö–≤–µ—Å—Ç—ã –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞",
            description="–ö–æ–º–∞–Ω–¥–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ –∏ –æ–±—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.",
            url_name="games:read_before_buy",
            icon="ü§ù",
            is_available=False,
            badge="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            badge_variant="secondary",
        ),
    )

    return [*available, *planned]