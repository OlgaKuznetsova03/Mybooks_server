"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import sys
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / ".env")

def env_bool(name: str, default: bool = False) -> bool:
    value = os.getenv(name)
    if value is None:
        return default
    return value.lower() in {"1", "true", "yes"}


# Provide a minimal Pillow stub for environments where the library is unavailable
try:  # pragma: no cover - executed conditionally when Pillow is missing
    import PIL.Image  # type: ignore
except Exception:  # pragma: no cover
    import types
    import sys

    pil_module = types.ModuleType("PIL")
    image_module = types.ModuleType("PIL.Image")

    class _StubImage:  # minimal stub for ImageField checks
        pass

    image_module.Image = _StubImage
    pil_module.Image = _StubImage

    sys.modules.setdefault("PIL", pil_module)
    sys.modules.setdefault("PIL.Image", image_module)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-l(91%(h@2ns6c^zl@sy)(#y50&nkase0^d%1k*jmyqgi6o!_k*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "kalejdoskopknig.ru",           # твой домен
    ".kalejdoskopknig.ru",
    '212.67.9.205', 
    'localhost', 
    '127.0.0.1'# на всякий случай поддомены (www и т.п.)
]

CSRF_TRUSTED_ORIGINS = [
    "https://*.ngrok-free.dev",
    "https://kalejdoskopknig.ru",
    "https://www.kalejdoskopknig.ru",
]

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO","https")
# Application definition
# Всегда принудительно на HTTPS (работает за Nginx благодаря SECURE_PROXY_SSL_HEADER)
SECURE_SSL_REDIRECT = True

# Куки только по HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# HTTP Strict Transport Security (HSTS) — 180 дней
SECURE_HSTS_SECONDS = 15552000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'books.apps.BooksConfig',
    'accounts.apps.AccountsConfig',
    'shelves.apps.ShelvesConfig',
    'games.apps.GamesConfig',
    'collaborations.apps.CollaborationsConfig',
    'reading_clubs.apps.ReadingClubsConfig',
    'reading_marathons.apps.ReadingMarathonsConfig',
    'user_ratings.apps.UserRatingsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "django.template.context_processors.media",
                "collaborations.context_processors.collaboration_notifications",
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

def env(*names, default=None):
    for n in names:
        v = os.getenv(n)
        if v not in (None, ""):
            return v
    return default

# БАЗОВОЕ подключение к Postgres (Beget)
DEFAULT_DATABASE = {
    "ENGINE": "django.db.backends.postgresql",
    "NAME": env("PG_NAME", "DB_NAME", default="mybooks"),
    "USER": env("PG_USER", "DB_USER", default="cloud_user"),
    "PASSWORD": env("PG_PASSWORD", "DB_PASSWORD", default=""),
    "HOST": env("PG_HOST", "DB_HOST", default="10.16.0.1"),
    "PORT": env("PG_PORT", "DB_PORT", default="5432"),
    "OPTIONS": {
        "sslmode": env("PG_SSLMODE", "DB_SSLMODE", default="disable"),
    },
    "CONN_MAX_AGE": int(env("PG_CONN_MAX_AGE", default="60")),
}

RUNNING_TESTS = (
    "test" in sys.argv or
    os.getenv("RUNNING_TESTS", "").lower() in {"1", "true", "yes"}
)

if RUNNING_TESTS and os.getenv("USE_POSTGRES_FOR_TESTS", "").lower() not in {"1", "true", "yes"}:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": env("PG_NAME", "DB_NAME", default="mybooks"),
        }
    }
else:
    DATABASES = {"default": DEFAULT_DATABASE}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",   # если у тебя есть папка static/ с исходниками
]

# куда collectstatic будет складывать СБОРНУЮ статику
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.yandex.ru")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "465"))
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = env_bool("EMAIL_USE_TLS", False)
EMAIL_USE_SSL = env_bool("EMAIL_USE_SSL", True)
EMAIL_TIMEOUT = int(os.getenv("EMAIL_TIMEOUT", "10"))
DEFAULT_FROM_EMAIL = os.getenv(
    "DEFAULT_FROM_EMAIL", EMAIL_HOST_USER or "noreply@mybooks.local"
)

if EMAIL_USE_TLS and EMAIL_USE_SSL:
    EMAIL_USE_SSL = False
    
LOGIN_REDIRECT_URL = 'book_list'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'login'

AUTHENTICATION_BACKENDS = [
    "accounts.backends.EmailBackend",
    "django.contrib.auth.backends.ModelBackend",
]

ISBNDB_API_KEY = os.getenv("ISBNDB_API_KEY", "")
if not ISBNDB_API_KEY:
    print("⚠️  ISBNDB_API_KEY is not set (put it into BASE_DIR/.env)")

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
if AWS_STORAGE_BUCKET_NAME:
    INSTALLED_APPS += ["storages"]

    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    AWS_S3_ENDPOINT_URL = os.getenv(
        "AWS_S3_ENDPOINT_URL", "https://s3.ru1.storage.beget.cloud"
    )
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")
    AWS_S3_ADDRESSING_STYLE = os.getenv("AWS_S3_ADDRESSING_STYLE", "path")
    AWS_QUERYSTRING_AUTH = env_bool("AWS_QUERYSTRING_AUTH", False)
    AWS_DEFAULT_ACL = os.getenv("AWS_DEFAULT_ACL", "public-read")
    AWS_S3_FILE_OVERWRITE = env_bool("AWS_S3_FILE_OVERWRITE", False)
    AWS_S3_SIGNATURE_VERSION = os.getenv("AWS_S3_SIGNATURE_VERSION", "s3v4")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "ru-1")


    MEDIA_URL = f"{AWS_S3_ENDPOINT_URL.rstrip('/')}/{AWS_STORAGE_BUCKET_NAME}/"